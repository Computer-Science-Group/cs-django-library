"""
Django settings for djangoLibrary project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from dotenv import load_dotenv

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# We load the .env file for database configuration
ENV_FILE = os.path.join(BASE_DIR, ".env")

# We check if the file exists
if os.path.isfile(ENV_FILE):
    # We load the file values to system
    load_dotenv(ENV_FILE)
    
    # Database name variable
    db_name = os.getenv("DATABASE_NAME")
    # Database user variable
    db_user = os.getenv("DATABASE_USER")
    # Database password variable
    db_password = os.getenv("DATABASE_PASSWORD")
    # The secret key is loaded from .env file for security reasons
    SECRET_KEY = os.getenv("SECRET_KEY")

else:
    # If file not found, we raise an error and exit
    raise FileNotFoundError(".env file must exist next to manage.py file")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'z5owhg_)$5wf+zj+gqlv-_t6q!iu3j6)arm(!$m9hv+2!=xtc@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# IP addresses permitted for hosting
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '127.0.1.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djangoLibrary.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoLibrary.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        # We use postgresql as a database
        'ENGINE': 'django.db.backends.postgresql',
        
        # We use the variables loaded from the .env file
        'NAME': db_name,
        'USER': db_user,
        'PASSWORD': db_password,
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Algiers'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
# Folder to hold all our static files (CSS/Javascript/Images)
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Folders holding sub-applications static files
STATICFILES_DIRS = [

]

MEDIA_URL = '/media/'

# Root folder for all files uploaded by users on runtime
MEDIA_ROOT = os.path.join(BASE_DIR, "mediafiles")
